[enrichment_tables.resources]
type = "file"
  [enrichment_tables.resources.file]
  encoding = { type = "csv", delimiter = ";" }
  path = "/opt/tables/resources.csv"

[transforms.map_to_resource]
type = "remap"
inputs = [ "route_by_type.resource" ]
source = '''
row = {}
if exists(.resource_id) {
  row = get_enrichment_table_record("resources", {"id": .resource_id}) ?? {}
  .dataset_id = get(row, ["dataset.id"]) ?? null
} else if exists(.resource_path) {
  # Try to match exact URL
  url = join(["https://static.data.gouv.fr/resources/", .resource_path]) ?? ""
  row = get_enrichment_table_record("resources", {"url": url}) ?? {}
  if row == {} {
    # If it fails, match dataset slug and filename and take last corresponding file
    # We may have multiple resources with the same filename. In this case we cannot know which
    # one was requested, which is why we pick one randomly.
    dataset_slug = split(.resource_path, "/")[0] ?? ""
    resource_name = split(.resource_path, "/")[-1] ?? ""
    dataset_rows = find_enrichment_table_records("resources", {"dataset.slug": dataset_slug}) ?? []
    for_each(dataset_rows) -> |_index, value| {
      resource_url = get(value, ["url"]) ?? ""
      if ends_with!(resource_url, resource_name) {
        row = get!(dataset_rows, [_index])
      }
    }
  }
  .resource_id = row.id
  .dataset_id = get(row, ["dataset.id"]) ?? null
}
row_url = get(row, ["url"]) ?? null
# URL format with .resource_path_match is the static URL
.redirects_to_static = starts_with(to_string(row_url) ?? "", "https://static.data.gouv.fr/resources/") && is_null(.resource_path)
'''

[transforms.filter_redirects_to_static]
type = "filter"
inputs = [ "map_to_resource" ]
# only main datagouvfr backend and filter out http errors
condition = '!(bool(.redirects_to_static) ?? false) || .method != "GET"'

[transforms.metric_count_resources]
type = "log_to_metric"
inputs = [ "filter_redirects_to_static" ]

  [[transforms.metric_count_resources.metrics]]
  field = "resource_id"
  namespace = "resource"
  type = "counter"

    [transforms.metric_count_resources.metrics.tags]
    resource_id = "{{resource_id}}"
    dataset_id = "{{dataset_id}}"
    status_code = "{{status_code}}"
    request_mode = "{{request_mode}}"
    request_type = "{{request_type}}"
